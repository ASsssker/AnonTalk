// Package boilerplate provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package boilerplate

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWzW7cNhB+FXbaQwtoJblxe9DNdYPGQH+CNJei9YGmxhLjFcmQI68Xht69GEq70kpK",
	"mwQ2UKCX1WqG8/t9M9QjKNs4a9BQgOIRgqqxkfHvxesrfjhvHXrSGIXSaX7Q3iEUEMhrU0HXJQeJvXmH",
	"iqBL4KX31i8dKFsiP2+tbyRBAdrQ9+dwdKANYYWePZQYlNeOtDUfGfONtc2VubXLsLpcukjgYVPZDQs3",
	"4U67jY2x5HbjLKfhoSDfYpeAkQ1+vv0yUxbpIU/StGXdhbFGN20QqpYECdyjD7FyOEvzNOfyrEMTAYAX",
	"aZ6eQQJOUh3ry/inQuLHSd/AI7XeBEE1ikZqIwJJ0kq8evvLz8LJCsXX2pT4kNbUbL+BGMVLNr4qoYDf",
	"0d/jFR+ABDwGZ03oW/ptnveAGkITAxM+UMZuRibxP3yQjYs1/tXm+Qv1xY+/Xb794/VLwUejCHvF4h1l",
	"OX2PreoF3C1xWUvqNdlENUjmxje23PfvaZoOZ0bZweiYwcjII+HmlIQ3Q2vH/sWGRm6Gtmmk37M9d3By",
	"hj3LKkDxJ/RQAJOBG3zNhpz4lmpVo7r7IKgBTSmk8Pi+xUCCbIR3Yik4qla4wPPVxPs6oPNI0Y/QQdi7",
	"WWXTeGjKyPpJddNC+tK8tU2cTRtWilIeJeGvuOMxXiR+OdMOtf9gy/2MhtK5rVbRMnsX+uUxsvF0Lzz9",
	"ZHeLrp59Un5febyFAr7MxsWcDVs5O+63FTIa3Anur4iLpUvgu8V8fn7gfpmvRI3k9gIH/ZQdPZzikNeE",
	"GPF1ZET2qMvug1SvkI5lzznx04nOSS8bJPQc5BE0W/OChMMC51ugJ472WPYYJpMOzAf++l833vNAeQLj",
	"eX7+/DDGiMaSuLWtKf8L7KmQJnRe5U7YyYo/Ff6BOfwNs0KaC6fhGbHlqGvVsppvAhHdjdjOBvkAw2pf",
	"Dtc5uxDSaTE1ntwsQ29Oc+j7tgsfMXbKGoOK1lfxie7Jxy4ZnLxv0e9HL21AH/9+ysj+T6dnQI8/DNZ2",
	"bwI7vAlW3SExJ9g0+uoRbP0WCsik09n9GXTX3d8BAAD//4r+WHYlDAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
