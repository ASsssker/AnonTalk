// Package boilerplate provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package boilerplate

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWwW7bMAz9FYHb0YmTrdvBt24Ytl6GYdehB1VmHDWxpFJ0syDwvw+Uk8aJvaEdWmDA",
	"TkpEkI/ke0/JDoyvg3foOEKxg2iWWOv08fLblRyBfEBii+lSBysHbwNCAZHJugraNjvc+JtbNAxtBp+I",
	"PA0LGF+inAtPtWYowDp+fwEPBaxjrJCkQonRkA1svXsk5nfv6yu38ENYWw5LZPBzUvmJXE7iyoaJT1h6",
	"PQle2iAomBpsM3C6xr/PH3YqV3bfJ1teS+zSeWfrJiqz1AwZ3CPFNDnMp7PpTMbzAV0iAN5OZ9M5ZBA0",
	"L9N8+RL1mpdmiWYl3ytkOU5WCBFdqbQivGswsmKveImql6ki0r01CAmLtORdlVDAl171DAhj8C52m30z",
	"m40hpTrKRuVXiavY1LWmLRTQx0NXpl0J/7qKUPzoh+FaMnPyvk6M+jgylCHUjF9xI+QPGv94Ft3P/sGX",
	"206NjtFxp+ywtiZl5rexk1znhqGanl8P7WCr8yf195pwAQW8yo92zvdezh9ckWBOt+dwo2S/KsmxzeBd",
	"R+ezAHdPwAiqyANJ4T7eV0dHpzr01RNG+npURL6zZftbqVfID2Ofa+LzSSxo0jUykoDswEq22AoOtpe3",
	"oxOOJSw7DrPeBs7fpetxg7w4lSc0XswuXp7GhOg8q4VvXPkvqKdC7sl5VDtxoyv5gfmDcuSXb0Q0l8HC",
	"C3IrqGPTShiVdSqVO3J7ZuQDDaN7IeSGXEwllA5W9ZOPazrs5rSHbm+b+AjbGe8cGh5/ik9iz267bF/k",
	"rkHaHqs0ESl9fIpl/1P37NmTPwZjb28GG7yJ3qyQRROSmmp1DDa0hgJyHWx+P4f2uv0VAAD//7VsCVZb",
	"CgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
