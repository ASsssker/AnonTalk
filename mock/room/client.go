// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ASsssker/AnonTalk/internal/room (interfaces: RoomClient)
//
// Generated by this command:
//
//	mockgen -package mock -destination /home/asker/code/AnonTalk/mock/room/client.go . RoomClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRoomClient is a mock of RoomClient interface.
type MockRoomClient struct {
	ctrl     *gomock.Controller
	recorder *MockRoomClientMockRecorder
	isgomock struct{}
}

// MockRoomClientMockRecorder is the mock recorder for MockRoomClient.
type MockRoomClientMockRecorder struct {
	mock *MockRoomClient
}

// NewMockRoomClient creates a new mock instance.
func NewMockRoomClient(ctrl *gomock.Controller) *MockRoomClient {
	mock := &MockRoomClient{ctrl: ctrl}
	mock.recorder = &MockRoomClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomClient) EXPECT() *MockRoomClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRoomClient) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRoomClientMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRoomClient)(nil).Close), ctx)
}

// GetID mocks base method.
func (m *MockRoomClient) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockRoomClientMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockRoomClient)(nil).GetID))
}

// Write mocks base method.
func (m *MockRoomClient) Write(msg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockRoomClientMockRecorder) Write(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockRoomClient)(nil).Write), msg)
}
